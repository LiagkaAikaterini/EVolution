# -*- coding: utf-8 -*-
"""data_generator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tVCrKi3qOdvFWU2vjfPBh4fjy-FtzqwM
"""

from google.colab import drive
drive.mount('/gdrive')
import os
os.listdir('/gdrive/My Drive')
path='/gdrive/My Drive/'

filename = "/gdrive/My Drive/Colab Notebooks/electric_vehicles_data.json"
import json
with open(filename) as f:
  data = json.load(f)
company_names1=[]
for i in range(0,len(data['data'])):
  company_names1.append(data['data'][i]['brand'])
myset=set(company_names1)
company_names1=list(myset)

!pip install randomuser

#Function to produce random datatimes
import random
from random import randrange
from datetime import timedelta

def random_date(start, end):
    """
    This function will return a random datetime between two datetime
    objects.
    """
    delta = end - start
    int_delta = (delta.days * 24 * 60 * 60) + delta.seconds
    random_second = randrange(int_delta)
    return start + timedelta(seconds=random_second)

    
from datetime import datetime

d1 = datetime.strptime('1/1/2018 1:30 PM', '%m/%d/%Y %I:%M %p')
d2 = datetime.strptime('1/1/2021 4:50 AM', '%m/%d/%Y %I:%M %p')

!pip install bcrypt

from randomuser import RandomUser
import hashlib
import bcrypt
# Generate a single user
user = RandomUser()

class Car_Owner:
  username=""
  email=""
  phone=""
  password=""
  points=0
  price_to_pay=0
  hashed_password =""


class Energy_Supplier:
  id=""
  company_name=""
  is_user=""
  username=""
  email=""
  phone=""
  password=""
  hashed_password =""
class Payment:
  id=""
  value_paid=""
  payment_way=""
  data_time=""
  points_used=""
  car_owner_username=""
  bank_id=""

class Bank:
  id=""
  name=""

class Car_Manufacturer:
  id=""
  company_name=""
  is_user=""
  username=""
  password=""
  email=""
  phone=""
  hashed_password =""


user_list = RandomUser.generate_users(100)
energy_suppliers=['Harz Energie','BS Energie','EV Energy Group (FCN)','eVgo Network','EVS Energieversorgung Sylt','Evway','EWB','EWI Energiewerke Isernhagen','Fenie EnergÃ­a (Spain)','FLOW Charging','FORTISIS','GardaUno','Gnrgy','GoCharge (IE)','Greenflux']
car_manufacturers=[Car_Manufacturer() for i in range(len(company_names1))]
car_owners = [Car_Owner() for i in range(len(user_list))]
energy_supplier=[Energy_Supplier() for i in range(len(energy_suppliers))]
payment=[Payment() for i in range(len(car_owners))]
banks=[Bank() for i in range(0,4)]

bank=['City Union Bank','Federal Bank','Union Bank','National Bank']

for i in range(0,4):
  banks[i].id=i+1
  banks[i].name=bank[i]



j=0
for i in user_list:
  car_owners[j].username=i.get_username()
  car_owners[j].email=i.get_email()
  car_owners[j].password=i.get_password()
  salt = bcrypt.gensalt()
  car_owners[j].hashed_password  = bcrypt.hashpw(car_owners[j].password.encode(), salt)
  car_owners[j].phone=i.get_phone()
  car_owners[j].points=random.randint(0,10000)
  #car_owners[j].price_to_pay=random.randint(0,1000)/10
  j=j+1

user_list = RandomUser.generate_users(len(energy_suppliers))
j=0
for i in user_list:
  energy_supplier[j].id=j+1
  energy_supplier[j].username=i.get_username() ############## insert from datafiles ???????????
  energy_supplier[j].email=i.get_email()
  energy_supplier[j].password=i.get_password()
  salt = bcrypt.gensalt()
  energy_supplier[j].hashed_password =  bcrypt.hashpw(car_owners[j].password.encode(), salt)
  energy_supplier[j].phone=i.get_phone()
  energy_supplier[j].is_user=random.randint(0,1)
  energy_supplier[j].company_name = energy_suppliers[j]
  j=j+1





user_list1 = RandomUser.generate_users(len(car_manufacturers))
for j in range(len(car_manufacturers)):
  car_manufacturers[j].id=j+1
  car_manufacturers[j].company_name=company_names1[j]
  car_manufacturers[j].is_user=random.randint(0,1)
  car_manufacturers[j].username=user_list1[j].get_username()
  car_manufacturers[j].password=user_list1[j].get_password()
  salt = bcrypt.gensalt()
  car_manufacturers[j].hashed_password =  bcrypt.hashpw(car_manufacturers[j].password.encode(),salt)
  car_manufacturers[j].email=user_list1[j].get_email()
  car_manufacturers[j].phone=user_list1[j].get_phone()

def pick_random(start,end):
  return random.randint(start,end-1)

"""# Car Generator"""

import random
from random import randint


def plate_gen():
  numbers='0123456789'

  L1=chr(randint(65,90))
  L2=chr(randint(65,90))
  L3=chr(randint(65,90))

  N1=random.choice(numbers)
  N2=random.choice(numbers)
  N3=random.choice(numbers)

  s=L1+L2+L3+"-"+N1+N2+N3
  return s

filename = "/gdrive/My Drive/Colab Notebooks/electric_vehicles_data.json"
import json

class car:
    ID=""
    model=""
    Car_Manufacturercompany_name=""
    Car_Ownerusername = ""
    usable_battery_size=""
    plates=""
    ac_charger=""
    dc_charger=""

class charger_type:
  ID=""
  type_=""
  phases=""
  fast_charging=""
  port=""

class has:
  Charger_TypeID=""
  CarID=""



with open(filename) as f:
  data = json.load(f)
  

  cars=[car() for i in range(len(data['data']))]

  for i in range(0,len(data['data'])):
      cars[i].ID=data['data'][i]['id']
      cars[i].model=data['data'][i]['model']
      # cars[i].Car_Manufacturercompany_name=data['data'][i]['brand']
      for j in car_manufacturers:
        if(data['data'][i]['brand'] == j.company_name):
          cars[i].Car_Manufacturercompany_name = j.id

      cars[i].usable_battery_size=data['data'][i]['usable_battery_size']
      cars[i].ac_charger=data['data'][i]['ac_charger']
      cars[i].dc_charger=data['data'][i]['dc_charger']
      cars[i].plates=plate_gen()

  user_set=set()
  for i in car_owners:
    if i in user_set:
      print("user already in set")
    user_set.add(i.username)
  j=0
  while (1):
    if (j>=len(cars)):
      break
    if (user_set):
      cars[j].Car_Ownerusername=user_set.pop()
      print("owner: "+cars[j].Car_Ownerusername)
      j+=1
      print(j)
    else:
      for i in car_owners:
        user_set.add(i.username)


  charger_ports_ac=set()
  charger_ports_dc=set()
  ac_phases=set()

  for i in range(0,len(data['data'])):
    if (cars[i].ac_charger):
      for j in range(0, len(cars[i].ac_charger['ports'])):
        charger_ports_ac.add(cars[i].ac_charger['ports'][j])
      ac_phases.add(cars[i].ac_charger['usable_phases'])
    if (cars[i].dc_charger):
      for j in range(0, len(cars[i].dc_charger['ports'])):
        charger_ports_dc.add(cars[i].dc_charger['ports'][j])
  # print(charger_ports_ac)
  # print(charger_ports_dc)
  # print(ac_phases)

  charger_types=[]
  id_inc=0
  for i in range (1,4):
    new_type=charger_type()
    charger_types.append(new_type)
    charger_types[id_inc].ID=id_inc+1
    charger_types[id_inc].type_='AC'
    charger_types[id_inc].phases=i
    charger_types[id_inc].port='type1'
    id_inc+=1
  
  for i in range (1,4):
    new_type=charger_type()
    charger_types.append(new_type)
    charger_types[id_inc].ID=id_inc+1
    charger_types[id_inc].type_='AC'
    charger_types[id_inc].phases=id_inc
    charger_types[id_inc].port='type2'
    id_inc+=1
   

  for i in range (len(charger_ports_dc)):
    new_type=charger_type()
    charger_types.append(new_type)
    charger_types[id_inc].ID=id_inc+1
    charger_types[id_inc].type_='DC'
    charger_types[id_inc].phases=0
    charger_types[id_inc].port=list(charger_ports_dc)[i]
    id_inc+=1

  # for i in range (0, len(charger_types)):
  #   print(charger_types[i].ID, charger_types[i].type_, charger_types[i].phases, charger_types[i].port)

  def get_charger_type (type_, phases, port):
    if (type_=='AC' and phases==1 and port=='type1'):
      return 1
    if (type_=='AC' and phases==2 and port=='type1'):
      return 2
    if (type_=='AC' and phases==3 and port=='type1'):
      return 3
    if (type_=='AC' and phases==1 and port=='type2'):
      return 4
    if (type_=='AC' and phases==2 and port=='type2'):
      return 5
    if (type_=='AC' and phases==3 and port=='type2'):
      return 6
    if (type_=='DC' and phases==0 and port=='tesla_ccs'):
      return 7
    if (type_=='DC' and phases==0 and port=='ccs'):
      return 8
    if (type_=='DC' and phases==0 and port=='chademo'):
      return 9
    if (type_=='DC' and phases==0 and port=='tesla_suc'):
      return 10
  
  has_relations=[]

  for i in range (0, len(data['data'])):
    if (cars[i].ac_charger):
      for j in range(0, len(cars[i].ac_charger['ports'])):
        temp=has()
        temp.Charger_TypeID=get_charger_type('AC', cars[i].ac_charger['usable_phases'], cars[i].ac_charger['ports'][j])
        temp.CarID=cars[i].ID
        has_relations.append(temp)
    if (cars[i].dc_charger):
      for j in range(0, len(cars[i].dc_charger['ports'])):
        temp=has()
        temp.Charger_TypeID=get_charger_type('DC', 0, cars[i].dc_charger['ports'][j])
        temp.CarID=cars[i].ID
        has_relations.append(temp)

month_to_number = {'Jan':1,
'Feb' : 2,
'Mar' : 3,
'Apr' : 4,
'May' : 5,
'Jun' : 6,
'Jul' : 7,
'Aug' : 8,
'Sep' : 9,
'Oct' : 10,
'Nov' : 11,
'Dec' : 12}

"""# Let's generate Charging Data"""

def its_a_date(date_str):
  my_date = datetime.strptime(date_str.split(" ",1)[0], "%d/%m/%Y").date()
  my_hour =  datetime.strftime(datetime.strptime(date_str.split(" ",1)[1], "%I:%M %p"),"%H:%M")
  return(str(my_date)+" "+str(my_hour))

import random
from datetime import datetime
protocols = ["OSCP","OCPP","PWM","LIN"]
def generate_total_km(car):
  
  events =dict()
  dates=[]
  for i in charging_events:
    if i.car_id == car:
      if i.total_km >0:
        events[i.date] = i.total_km
        dates.append(i.date)
  if(len(dates)>0):
    max = dates[0]
    for x, y in events.items():
      if(x>max and y!=0):
        max =x
    rand_km = random.randint(events[max],2000000)
    diff = events[max]
  else:
    diff = random.randint(0,2000000)
    rand_km = random.randint(diff,2000000)
  return [rand_km,diff]
def return_rand_car(owner):
  car_list=[]
  
  for i in cars:
    if i.Car_Ownerusername ==owner:
      car_list.append(i.ID)
  if (len(car_list)>1):
    return car_list[random.randint(0,len(car_list)-1)]
  else:
    if(len(car_list) ==0):
      print ("\n "+owner)
    return car_list[0]
def convert_td(timestamp_string):
  return str(int(timestamp_string[5:7]))+"/"+str(month_to_number[timestamp_string[8:11]])+"/"+str(timestamp_string[12:16]+" "+datetime.strptime(timestamp_string[17:22], "%H:%M").strftime("%I:%M %p"))


class Charging:
  def __init__(self, js_dat):
    self.id = js_dat["_id"]
    self.connection_time = js_dat["connectionTime"]
    self.disconnection_time = js_dat["disconnectTime"]
    self.done_charging_time=js_dat["doneChargingTime"]
    self.kWh_delivered = js_dat["kWhDelivered"]
    #self.date = js_dat["sessionID"].split("_")[4][0:10]
    self.date = convert_td(js_dat["connectionTime"])
    self.sessid = js_dat["sessionID"]
