var dbConn  = require('../../config/db.config');
const jwt=require('jsonwebtoken');
const bcrypt=require('bcrypt');
const salt=10;//hash parameter
const dotenv = require("dotenv");
const sha512crypt = require("sha512crypt-node").sha512crypt;

dotenv.config();

var User = function(user){
    this.id = user.id;
    this.username     =   user.username;
    this.password      =   user.password;
    this.email          =   user.email;
    this.token = user.token;
    this.category ="";

}



User.findByManufacturerUsername = async(username, result)=>{
        
    dbConn.query("SELECT * FROM Car_Manufacturer WHERE username= '"+ username.username+"'", (err, res)=>{
        if(err){
            console.log('Error while fetching user by username', err);
            result(err, null);
            return;
        }else{
            if(res[0] !=undefined){
            User.id = res[0].ID;
            User.username = res[0].username;
            User.password = res[0].password;
            User.category = "Car_Manufacturer";
            console.log("id "+User.id+" username: "+User.username+" password: "+User.password+" category: "+User.category)
            result(null, res[0]);
            return;
            }else{
                result(null, null);
                return; 
            }
        }
    })
}
    
User.findBySupplierUsername = (username, result)=>{
         
    dbConn.query("SELECT * FROM Energy_Supplier WHERE username= '"+ username.username+"'", (err, res)=>{
        if(err){
            console.log('Error while fetching user by username', err);
            result(err, null);
            return;
        }else{
            if(res[0] != undefined){
            User.id = res[0].ID;
            User.username = res[0].username;
            User.password = res[0].password;
            User.category = "Energy Supplier";
            console.log("id "+User.id+" username: "+User.username+" password: "+User.password+" category: "+User.category)
            result(null, res[0]);
            return;
            }else{
                result(null, null);
                return;
            }
        }
    })
}
    
User.findByOwnerUsername = (username, result)=>{
    dbConn.query("SELECT * FROM Car_Owner WHERE username= '"+ username.username+"'", (err, res)=>{
        if(err){
            console.log('Error while fetching user by username', err);
            result(err, null);
            return;
        }else{
            if(res[0] !=undefined){
            console.log(res[0]);
            User.id = res[0].ID;
            User.username = res[0].username;
            User.password = res[0].password;
            User.category = "Car_Owner";
            console.log("id "+User.id+" username: "+User.username+" password: "+User.password+" category: "+User.category)
            result(null, res[0]);
            return;
            }else{
                result(null, null);
                return;
            }
        }
    })
}
// get all users
User.comparePassword = function(password,resp){
    // console.log("pw: "+password+" cpw: "+this.password)
    // var verified = bcrypt.compareSync(password, User.password)
    // if(verified){
    //     console.log("ok");
    //     return(resp(null,true));
    // }else{
    //     console.log("not ok! ")
    //     return(resp(null,false));
    // }


// // origHash is the hash generated by passlib  
console.log("here");  
// var origHash = "$6$rounds=656000$8Wc3AqHSFxcaZGUb$qgIxg10neNCUH508Aw1ZCBVbSZAPtniqDWYJhUnYnFz1M3tMwFToyzABsajiJ5TTeeljsRykRRQulbs9jzvbS.",
//     parts = origHash.split('$'),
//     rounds = parts[2],
//     salt = '$' + parts[1] + '$' + rounds + '$' + parts[3],
//     npassword = "lightning";
// var hash = sha512crypt(npassword, salt);
var origHash = this.password,
    parts = origHash.split('$'),
    rounds = parts[2],
    salt = '$' + parts[1] + '$' + rounds + '$' + parts[3];
var hash = sha512crypt(password, salt);
console.log("verified", hash === origHash);
if(hash === origHash) return(resp(null,true));
else return(resp(null,false));
}


User.generateToken = function(resp){
    var uname = {username: User.username};
    User.token = jwt.sign(uname, process.env.TOKEN_SECRET, { expiresIn: '2 days' });
        resp(null,User);
        return;
}

User.findByToken = async (tok, result) => {
    
    if (!tok) {
        result(null,"fail");
        return;
    }else{
        console.log("look: "+tok);
        jwt.verify(tok,  process.env.TOKEN_SECRET, (err, decoded) => {
        if (err) {
            console.log("stranger");
            result(null,"fail");
            return;
        }else{
        console.log("love");
        User.username = decoded.username;
        result(null,User.username);
        return;
        }
        });
    }
    console.log("result: "+result);
  };

User.verifyToken = function(tok,req, result,next) {
    
    if (!tok) {
    
      return result.status(403).send({
        message: "No token provided!"
      });
    }
  
    jwt.verify(tok, config.secret, (err, decoded) => {
      if (err) {
        return result.status(401).send({
          message: "Unauthorized!"
        });
      }
      this.id = decoded.id;
      
    });
  };
  
// User.deleteToken = function(token, resp){
//     dbConn.query('UPDATE ? SET token=NULL', user.category, (err, res)=>{
//         if(err){
//             console.log('Error while fetching user by username', err);
//             result(null, err);
//         }else{
//             result(null, res);
//         }
//     })
//     this.token =-1;
    
// }

User.test = async (test_pam,err,result)=>{
    if(err){
        result(err, null);
        return;
    }
    result(null,res);
    return;
}
module.exports = User;